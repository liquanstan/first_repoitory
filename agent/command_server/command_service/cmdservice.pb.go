// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cmdservice.proto

package command_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GrpcRequest struct {
	ServerKey            string   `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	ServerValue          string   `protobuf:"bytes,2,opt,name=server_value,json=serverValue,proto3" json:"server_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcRequest) Reset()         { *m = GrpcRequest{} }
func (m *GrpcRequest) String() string { return proto.CompactTextString(m) }
func (*GrpcRequest) ProtoMessage()    {}
func (*GrpcRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmdservice_85ffd6e8b915a62c, []int{0}
}
func (m *GrpcRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcRequest.Unmarshal(m, b)
}
func (m *GrpcRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcRequest.Marshal(b, m, deterministic)
}
func (dst *GrpcRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcRequest.Merge(dst, src)
}
func (m *GrpcRequest) XXX_Size() int {
	return xxx_messageInfo_GrpcRequest.Size(m)
}
func (m *GrpcRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcRequest proto.InternalMessageInfo

func (m *GrpcRequest) GetServerKey() string {
	if m != nil {
		return m.ServerKey
	}
	return ""
}

func (m *GrpcRequest) GetServerValue() string {
	if m != nil {
		return m.ServerValue
	}
	return ""
}

type GrpcReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcReply) Reset()         { *m = GrpcReply{} }
func (m *GrpcReply) String() string { return proto.CompactTextString(m) }
func (*GrpcReply) ProtoMessage()    {}
func (*GrpcReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmdservice_85ffd6e8b915a62c, []int{1}
}
func (m *GrpcReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcReply.Unmarshal(m, b)
}
func (m *GrpcReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcReply.Marshal(b, m, deterministic)
}
func (dst *GrpcReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcReply.Merge(dst, src)
}
func (m *GrpcReply) XXX_Size() int {
	return xxx_messageInfo_GrpcReply.Size(m)
}
func (m *GrpcReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcReply.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcReply proto.InternalMessageInfo

func (m *GrpcReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GrpcRequest)(nil), "agent.GrpcRequest")
	proto.RegisterType((*GrpcReply)(nil), "agent.GrpcReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContactClient is the client API for Contact service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactClient interface {
	GetContact(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcReply, error)
}

type contactClient struct {
	cc *grpc.ClientConn
}

func NewContactClient(cc *grpc.ClientConn) ContactClient {
	return &contactClient{cc}
}

func (c *contactClient) GetContact(ctx context.Context, in *GrpcRequest, opts ...grpc.CallOption) (*GrpcReply, error) {
	out := new(GrpcReply)
	err := c.cc.Invoke(ctx, "/agent.Contact/GetContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServer is the server API for Contact service.
type ContactServer interface {
	GetContact(context.Context, *GrpcRequest) (*GrpcReply, error)
}

func RegisterContactServer(s *grpc.Server, srv ContactServer) {
	s.RegisterService(&_Contact_serviceDesc, srv)
}

func _Contact_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.Contact/GetContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServer).GetContact(ctx, req.(*GrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contact_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Contact",
	HandlerType: (*ContactServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContact",
			Handler:    _Contact_GetContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmdservice.proto",
}

func init() { proto.RegisterFile("cmdservice.proto", fileDescriptor_cmdservice_85ffd6e8b915a62c) }

var fileDescriptor_cmdservice_85ffd6e8b915a62c = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0x4d, 0x29,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x4c,
	0x4f, 0xcd, 0x2b, 0x51, 0xf2, 0xe7, 0xe2, 0x76, 0x2f, 0x2a, 0x48, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0x11, 0x92, 0xe5, 0xe2, 0x02, 0x29, 0x4b, 0x2d, 0x8a, 0xcf, 0x4e, 0xad, 0x94, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x84, 0x88, 0x78, 0xa7, 0x56, 0x0a, 0x29, 0x72, 0xf1, 0x40,
	0xa5, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x98, 0xc0, 0x0a, 0xb8, 0x21, 0x62, 0x61, 0x20, 0x21,
	0x25, 0x55, 0x2e, 0x4e, 0x88, 0x81, 0x05, 0x39, 0x95, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5,
	0xc5, 0x89, 0xe9, 0xa9, 0x50, 0xb3, 0x60, 0x5c, 0x23, 0x7b, 0x2e, 0x76, 0xe7, 0xfc, 0xbc, 0x92,
	0xc4, 0xe4, 0x12, 0x21, 0x13, 0x2e, 0x2e, 0xf7, 0xd4, 0x12, 0x18, 0x4f, 0x48, 0x0f, 0xec, 0x30,
	0x3d, 0x24, 0x57, 0x49, 0x09, 0xa0, 0x88, 0x15, 0xe4, 0x54, 0x2a, 0x31, 0x24, 0xb1, 0x81, 0xbd,
	0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x39, 0xed, 0x1a, 0xda, 0x00, 0x00, 0x00,
}
